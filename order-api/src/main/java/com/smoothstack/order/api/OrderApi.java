/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.smoothstack.order.api;

import java.math.BigDecimal;

import com.smoothstack.order.exception.UserNotFoundException;
import com.smoothstack.order.model.InlineObject;
import com.smoothstack.order.model.InlineObject1;
import com.smoothstack.order.model.InlineObject2;
import com.smoothstack.order.model.CreateResponse;
import java.util.List;
import com.smoothstack.order.model.Order;
import com.smoothstack.order.exception.EmptyCartException;
import com.smoothstack.order.exception.MissingFieldsException;
import com.smoothstack.order.exception.OrderTimeException;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import javax.validation.Valid;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-06-30T22:53:09.076567700-06:00[America/Denver]")
@Validated
@Api(value = "order", description = "the order API")
@CrossOrigin
public interface OrderApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * PUT /order : Create order
     * Create new order, sends back checkout session data. Payment intent will be canceled in 5 minutes if not paid. (Server note: use stripe webhooks to update payment status)
     *
     * @param order  (optional)
     * @return OK (status code 200)
     *         or Access token is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     */
    @ApiOperation(value = "Create order", nickname = "createOrder", notes = "Create new order, sends back checkout session data. Payment intent will be canceled in 5 minutes if not paid. (Server note: use stripe webhooks to update payment status)",
            response = CreateResponse.class, tags={ "order", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = CreateResponse.class),
        @ApiResponse(code = 401, message = "Access token is missing or invalid", response = String.class),
        @ApiResponse(code = 403, message = "Forbidden") })
    @PutMapping(
        path = "/order",
        produces = { "application/json", "application/xml" },
        consumes = { "application/json", "application/xml" }
    )
    default ResponseEntity<CreateResponse> createOrder(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) Order order,
                                                       Authentication authentication) throws EmptyCartException, MissingFieldsException, OrderTimeException, UserNotFoundException {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : \"id\", \"type\" : \"stripe\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<null> <type>aeiou</type> <id>aeiou</id> </null>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /order/driver : Driver Accept Orders
     * Accepts order
     *
     * @param requestBody Array of order id&#39;s to accept (optional)
     * @return Orders Accepted (status code 200)
     *         or Orders can&#39;t be accepted together (status code 400)
     *         or Access token is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     *         or Order not found (status code 404)
     */
    @ApiOperation(value = "Driver Accept Orders", nickname = "driverAcceptOrders", notes = "Accepts order", authorizations = {
        
        @Authorization(value = "JWT")
         }, tags={ "order", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Orders Accepted"),
        @ApiResponse(code = 400, message = "Orders can't be accepted together", response = String.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Access token is missing or invalid", response = String.class),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Order not found", response = String.class, responseContainer = "List") })
    @PutMapping(
        value = "/order/driver",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> driverAcceptOrders(@ApiParam(value = "Array of order id's to accept"  )  @Valid @RequestBody(required = false) List<String> requestBody) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /order/driver : Driver Update Order
     * Mark order delivered/picked up
     *
     * @param inlineObject2  (optional)
     * @return Order Delivered (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Order Not Found (status code 404)
     */
    @ApiOperation(value = "Driver Update Order", nickname = "driverDeliverOrder", notes = "Mark order delivered/picked up", authorizations = {
        
        @Authorization(value = "JWT")
         }, tags={ "order", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Order Delivered"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Order Not Found") })
    @PatchMapping(
        value = "/order/driver",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> driverDeliverOrder(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) InlineObject2 inlineObject2) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /order/driver : Driver Cancel Order
     * Removes driver from order, a new driver should be assigned
     *
     * @param body orderId (optional)
     * @return Removed from order (status code 200)
     *         or Access token is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @ApiOperation(value = "Driver Cancel Order", nickname = "driverRemoveOrder", notes = "Removes driver from order, a new driver should be assigned", authorizations = {
        
        @Authorization(value = "JWT")
         }, tags={ "order", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Removed from order"),
        @ApiResponse(code = 401, message = "Access token is missing or invalid", response = String.class),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found") })
    @DeleteMapping(
        value = "/order/driver",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> driverRemoveOrder(@ApiParam(value = "orderId"  )  @Valid @RequestBody(required = false) String body) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /order/driver : Driver Get Accepted Orders
     * Returns all orders assigned to driver
     *
     * @return OK (status code 200)
     *         or Access token is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     */
    @ApiOperation(value = "Driver Get Accepted Orders", nickname = "getAcceptedOrders", notes = "Returns all orders assigned to driver", response = Order.class, responseContainer = "List", authorizations = {
        
        @Authorization(value = "JWT")
         }, tags={ "order", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Order.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Access token is missing or invalid", response = String.class),
        @ApiResponse(code = 403, message = "Forbidden") })
    @GetMapping(
        value = "/order/driver",
        produces = { "application/json", "application/xml" }
    )
    default ResponseEntity<List<Order>> getAcceptedOrders() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"orderType\" : \"delivery\", \"driverNote\" : \"driverNote\", \"address\" : \"address\", \"orderTime\" : { \"driverAccept\" : \"2021-02-10T00:00:00.000Z\", \"orderPlaced\" : \"2021-02-10T00:00:00.000Z\", \"deliverySlot\" : \"2021-02-10T00:00:00.000Z\", \"restaurantStart\" : \"2021-02-10T00:00:00.000Z\", \"delivered\" : \"2021-02-10T00:00:00.000Z\", \"restaurantAccept\" : \"2021-02-10T00:00:00.000Z\", \"restaurantComplete\" : \"2021-02-10T00:00:00.000Z\" }, \"driverId\" : \"driverId\", \"price\" : { \"delivery\" : 6.027456183070403, \"tip\" : 1.4658129805029452, \"food\" : 0.8008281904610115 }, \"refunded\" : true, \"id\" : \"id\", \"restaurantId\" : \"restaurantId\", \"food\" : [ { \"restaurantId\" : \"restaurantId\", \"items\" : [ { \"configurations\" : [ \"configurations\", \"configurations\" ], \"name\" : \"name\" }, { \"configurations\" : [ \"configurations\", \"configurations\" ], \"name\" : \"name\" } ] }, { \"restaurantId\" : \"restaurantId\", \"items\" : [ { \"configurations\" : [ \"configurations\", \"configurations\" ], \"name\" : \"name\" }, { \"configurations\" : [ \"configurations\", \"configurations\" ], \"name\" : \"name\" } ] } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<Order> <id>aeiou</id> <orderType>aeiou</orderType> <driverId>aeiou</driverId> <restaurantId>aeiou</restaurantId> <driverNote>aeiou</driverNote> <address>aeiou</address> <refunded>true</refunded> </Order>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /order : Get orders
     * Returns authenticated users orders, server will check ensure deliveryslot is valid for all chosen restaurants
     *
     * @param active if true only returns pending orders (optional)
     * @return OK (status code 200)
     *         or Invalid deliverySlot (status code 400)
     *         or Access token is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     *         or restaurant/item not found (status code 404)
     */
    @ApiOperation(value = "Get orders", nickname = "getOrder", notes = "Returns authenticated users orders, server will check ensure deliveryslot is valid for all chosen restaurants", response = Order.class, responseContainer = "List", tags={ "order", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Order.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid deliverySlot"),
        @ApiResponse(code = 401, message = "Access token is missing or invalid", response = String.class),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "restaurant/item not found") })
    @GetMapping(
        path = "/order",
        produces = { "application/json", "application/xml" }
    )
    default ResponseEntity<List<Order>> getOrder(@ApiParam(value = "if true only returns pending orders") @Valid @RequestParam(value = "active", required = false) Boolean active) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"orderType\" : \"delivery\", \"driverNote\" : \"driverNote\", \"address\" : \"address\", \"orderTime\" : { \"driverAccept\" : \"2021-02-10T00:00:00.000Z\", \"orderPlaced\" : \"2021-02-10T00:00:00.000Z\", \"deliverySlot\" : \"2021-02-10T00:00:00.000Z\", \"restaurantStart\" : \"2021-02-10T00:00:00.000Z\", \"delivered\" : \"2021-02-10T00:00:00.000Z\", \"restaurantAccept\" : \"2021-02-10T00:00:00.000Z\", \"restaurantComplete\" : \"2021-02-10T00:00:00.000Z\" }, \"driverId\" : \"driverId\", \"price\" : { \"delivery\" : 6.027456183070403, \"tip\" : 1.4658129805029452, \"food\" : 0.8008281904610115 }, \"refunded\" : true, \"id\" : \"id\", \"restaurantId\" : \"restaurantId\", \"food\" : [ { \"restaurantId\" : \"restaurantId\", \"items\" : [ { \"configurations\" : [ \"configurations\", \"configurations\" ], \"name\" : \"name\" }, { \"configurations\" : [ \"configurations\", \"configurations\" ], \"name\" : \"name\" } ] }, { \"restaurantId\" : \"restaurantId\", \"items\" : [ { \"configurations\" : [ \"configurations\", \"configurations\" ], \"name\" : \"name\" }, { \"configurations\" : [ \"configurations\", \"configurations\" ], \"name\" : \"name\" } ] } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<null> <id>aeiou</id> <orderType>aeiou</orderType> <driverId>aeiou</driverId> <restaurantId>aeiou</restaurantId> <driverNote>aeiou</driverNote> <address>aeiou</address> <refunded>true</refunded> </null>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /order/driver : Driver Get Available Orders
     * Returns all available orders for driver (uses geolocation)
     *
     * @param tip (&gt;&#x3D;) tip (optional)
     * @param distance &lt;&#x3D; distance (miles) (optional)
     * @param inlineObject1  (optional)
     * @return OK (status code 200)
     */
    @ApiOperation(value = "Driver Get Available Orders", nickname = "postOrderDriver", notes = "Returns all available orders for driver (uses geolocation)", response = Order.class, responseContainer = "List", tags={ "order", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Order.class, responseContainer = "List") })
    @PostMapping(
        value = "/order/driver",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<List<Order>> postOrderDriver(@ApiParam(value = "(>=) tip") @Valid @RequestParam(value = "tip", required = false) BigDecimal tip,@ApiParam(value = "<= distance (miles)") @Valid @RequestParam(value = "distance", required = false) BigDecimal distance,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) InlineObject1 inlineObject1) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"orderType\" : \"delivery\", \"driverNote\" : \"driverNote\", \"address\" : \"address\", \"orderTime\" : { \"driverAccept\" : \"2021-02-10T00:00:00.000Z\", \"orderPlaced\" : \"2021-02-10T00:00:00.000Z\", \"deliverySlot\" : \"2021-02-10T00:00:00.000Z\", \"restaurantStart\" : \"2021-02-10T00:00:00.000Z\", \"delivered\" : \"2021-02-10T00:00:00.000Z\", \"restaurantAccept\" : \"2021-02-10T00:00:00.000Z\", \"restaurantComplete\" : \"2021-02-10T00:00:00.000Z\" }, \"driverId\" : \"driverId\", \"price\" : { \"delivery\" : 6.027456183070403, \"tip\" : 1.4658129805029452, \"food\" : 0.8008281904610115 }, \"refunded\" : true, \"id\" : \"id\", \"restaurantId\" : \"restaurantId\", \"food\" : [ { \"restaurantId\" : \"restaurantId\", \"items\" : [ { \"configurations\" : [ \"configurations\", \"configurations\" ], \"name\" : \"name\" }, { \"configurations\" : [ \"configurations\", \"configurations\" ], \"name\" : \"name\" } ] }, { \"restaurantId\" : \"restaurantId\", \"items\" : [ { \"configurations\" : [ \"configurations\", \"configurations\" ], \"name\" : \"name\" }, { \"configurations\" : [ \"configurations\", \"configurations\" ], \"name\" : \"name\" } ] } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /order : Update Order Configurations
     * Updates active order
     *
     * @param inlineObject  (optional)
     * @return Update successful (status code 200)
     *         or Access token is missing or invalid (status code 401)
     *         or Forbidden (status code 403)
     *         or Item or order not found (status code 404)
     */
    @ApiOperation(value = "Update Order Configurations", nickname = "updateOrderConfigurations", notes = "Updates active order"/*, authorizations = {
        
        @Authorization(value = "JWT")
         }*/, tags={ "order", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Update successful"),
        @ApiResponse(code = 401, message = "Access token is missing or invalid", response = String.class),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Item or order not found") })
    @PatchMapping(
        value = "/order",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> updateOrderConfigurations(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) InlineObject inlineObject) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
